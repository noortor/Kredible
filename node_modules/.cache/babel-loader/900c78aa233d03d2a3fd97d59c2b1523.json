{"ast":null,"code":"import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\nimport axios from \"axios\"; // const firebaseConfig = {\n//     apiKey: process.env.FIREBASE_API_KEY,\n//     authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n//     databaseURL: process.env.FIREBASE_DATABASE_URL,\n//     projectId: process.env.FIREBASE_PROJECT_ID,\n//     storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n//     messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n//     appId: process.env.FIREBASE_APP_ID\n// }\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCSRigYRYNq2t1Poafz95TskxiOPr0-BqQ\",\n  authDomain: \"kredible-b955d.firebaseapp.com\",\n  projectId: \"kredible-b955d\",\n  storageBucket: \"kredible-b955d.appspot.com\",\n  messagingSenderId: \"550602858878\",\n  appId: \"1:550602858878:web:9e86f53ca34a874630532f\"\n}; // Initialize Firebase\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} else {\n  firebase.app(); // if already initialized, use that one\n}\n\nexport const auth = firebase.auth();\naxios.interceptors.request.use(async config => {\n  // all outgoing axios requests now automatically have the JWT token identifying the logged in user added to headers.authorization\n  // this means that the server can automatically verify requests which need users to be logged in\n  if (auth.currentUser && config.headers) {\n    config.headers.authorization = \"Bearer \" + (await auth.currentUser.getIdToken());\n  }\n\n  return config;\n});\nexport default firebase;","map":{"version":3,"sources":["/Users/nmahini/Desktop/kredit4kids/src/firebase.js"],"names":["firebase","axios","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","apps","length","initializeApp","app","auth","interceptors","request","use","config","currentUser","headers","authorization","getIdToken"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,sBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,gCAFO;AAGnBC,EAAAA,SAAS,EAAE,gBAHQ;AAInBC,EAAAA,aAAa,EAAE,4BAJI;AAKnBC,EAAAA,iBAAiB,EAAE,cALA;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAAvB,C,CASA;;AACA,IAAI,CAACR,QAAQ,CAACS,IAAT,CAAcC,MAAnB,EAA2B;AACvBV,EAAAA,QAAQ,CAACW,aAAT,CAAuBT,cAAvB;AACH,CAFD,MAEO;AACHF,EAAAA,QAAQ,CAACY,GAAT,GADG,CACa;AACnB;;AAED,OAAO,MAAMC,IAAI,GAAGb,QAAQ,CAACa,IAAT,EAAb;AAGPZ,KAAK,CAACa,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,MAAMC,MAAN,IAAgB;AAC3C;AACA;AACA,MAAIJ,IAAI,CAACK,WAAL,IAAoBD,MAAM,CAACE,OAA/B,EAAwC;AACpCF,IAAAA,MAAM,CAACE,OAAP,CAAeC,aAAf,GAA+B,aAAa,MAAMP,IAAI,CAACK,WAAL,CAAiBG,UAAjB,EAAnB,CAA/B;AACH;;AACD,SAAOJ,MAAP;AACH,CAPD;AASA,eAAejB,QAAf","sourcesContent":["import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\"\nimport axios from \"axios\";\n\n// const firebaseConfig = {\n//     apiKey: process.env.FIREBASE_API_KEY,\n//     authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n//     databaseURL: process.env.FIREBASE_DATABASE_URL,\n//     projectId: process.env.FIREBASE_PROJECT_ID,\n//     storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n//     messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n//     appId: process.env.FIREBASE_APP_ID\n// }\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCSRigYRYNq2t1Poafz95TskxiOPr0-BqQ\",\n    authDomain: \"kredible-b955d.firebaseapp.com\",\n    projectId: \"kredible-b955d\",\n    storageBucket: \"kredible-b955d.appspot.com\",\n    messagingSenderId: \"550602858878\",\n    appId: \"1:550602858878:web:9e86f53ca34a874630532f\"\n};\n\n// Initialize Firebase\nif (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n} else {\n    firebase.app(); // if already initialized, use that one\n}\n\nexport const auth = firebase.auth();\n\n\naxios.interceptors.request.use(async config => {\n    // all outgoing axios requests now automatically have the JWT token identifying the logged in user added to headers.authorization\n    // this means that the server can automatically verify requests which need users to be logged in\n    if (auth.currentUser && config.headers) {\n        config.headers.authorization = \"Bearer \" + (await auth.currentUser.getIdToken());\n    }\n    return config;\n});\n\nexport default firebase"]},"metadata":{},"sourceType":"module"}